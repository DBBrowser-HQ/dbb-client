plugins {
    id 'java'
    id 'application'
}

group 'org.example'
version '1.0'

repositories {
    mavenCentral()
}

//load the values from .properties file
//var keystoreFile = project.rootProject.file(".properties")
//var properties = new Properties()
//properties.load(keystoreFile.newInputStream())

//return empty key in case something goes wrong
//var backendUrl = properties.getProperty("backendUrl") ?: ""

application {
    mainClass = 'Main'
}

task copyQtJambiLibs(type: Copy) {
    into("$buildDir/libs")
    from { configurations.runtimeClasspath.findAll { it.name.endsWith('.jar') } }
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    //dependsOn copyQtJambiLibs
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation files('libs/qtjambi-native-windows-x64-6.6.0.jar')
    implementation 'io.qtjambi:qtjambi:6.6.0'
    implementation 'org.xerial:sqlite-jdbc:3.44.1.0'
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation 'org.slf4j:slf4j-api:2.0.13'
    testImplementation 'org.slf4j:slf4j-simple:2.0.13'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    implementation group: 'org.json', name: 'json', version: '20231013'
    implementation 'com.squareup.retrofit2:retrofit:2.1.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.13'
}
/*
task qtJambi {
    def QT_BUILD_DIR = "C:\\Qt\\Tools\\sdktool"
    def nativeLib = hasProperty('nativeLib')
            ? 'qtjambi4.dll' : 'libqtjambi4.jnilib'
    doLast {
        copy {
            from "${QT_BUILD_DIR}/bin"
            include nativeLib
            into "${buildDir}/libs"
        }
    }
}*/

test {
    useJUnitPlatform()
}
